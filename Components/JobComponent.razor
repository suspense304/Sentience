@using System.Timers
@using Sentience.Models.Jobs

@inject GameEngine _engine

@if (Job != null)
{
    @if (SideBar)
    {
        <td @onclick="Select">
            <div class="progress-bar">
                <div class="progress-fill" style="width: @((Job.CurrentXP / Job.NextLevel) * 100)%; transition: all @((_engine.GetGameSpeed()/1000))s linear;">
                </div>
                <div class="progress-text">@Job.Name</div>
            </div>
        </td>
    }
    else
    {
        <tr class="@((Job.Active) ? "job-active" : "job-inactive")">
            <td @onclick="Select">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: @((Job.CurrentXP / Job.NextLevel) * 100)%; transition: all @((_engine.GetGameSpeed()/1000))s linear;">
                    </div>
                    <div class="progress-text">@Job.Name</div>
                </div>
            </td>
            <td>@Job.Level</td>
            <td>$@_engine.FormatNumber(_engine.GetCurrentIncome(Job))</td>
            <td>@_engine.FormatNumber((_engine.GetJobXPGain()))</td>
            <td>@_engine.FormatNumber(Job.XPRemaining(Job.CurrentXP))</td>
        </tr>
    }

}


@code {
    [Parameter] public EventCallback<Job> OnClick { get; set; }
    [Parameter] public Job Job { get; set; }
    [Parameter] public bool SideBar { get; set; } = false;

    JobEventArgs jobEvent;

    protected override async Task OnInitializedAsync()
    {
        JobUpdated += (o, args) =>
        {
            jobEvent = args;
            StateHasChanged();
        };
    }

    public async void Select()
    {
        if (!Job.Active)
        {
            _engine.SetActiveJob(Job);
            _engine.SetDailyIncome(Job.Income);
            _engine.GetNextUpgrades();
            await OnClick.InvokeAsync(Job);
        }
    }
}
