@using System.Timers
@using Sentience.Models.Research

@inject GameEngine _engine

@if (Research != null)
{
    @if(SideBar)
    {
        <td @onclick="Select">
            <div class="progress-bar">
                <div class="progress-fill" style="width: @((Research.CurrentXP / Research.NextLevel) * 100)%; transition: all @((_engine.GetGameSpeed()/1000))s linear;">
                </div>
                <div class="progress-text">@Research.Name</div>
            </div>
        </td>
    }
    else
    {
       <tr class="@((Research.Active) ? "research-active" : "research-inactive")">
        <td @onclick="Select">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: @((Research.CurrentXP / Research.NextLevel) * 100)%; transition: all @((_engine.GetGameSpeed()/1000))s linear;">
                    </div>
                    <div class="progress-text">@Research.Name</div>
                </div>
        </td>
        <td>@Research.Level</td>
        <td style="width: 250px;">x@_engine.GetResearchModifier(@Research) @Research.Modifier.GetDisplayName()</td>
        <td>@_engine.FormatNumber((_engine.GetResearchXPGain()))</td>
        <td>@_engine.FormatNumber(Research.XPRemaining(Research.CurrentXP))</td>
    </tr> 
    }
}


@code {
    [Parameter] public EventCallback<ResearchProject> OnClick { get; set; }
    [Parameter] public ResearchProject Research { get; set; }
    [Parameter] public bool SideBar { get; set; } = false;

    ResearchEventArgs researchEvent;

    protected override async Task OnInitializedAsync()
    {
        ResearchUpdated += (o, args) =>
        {
            researchEvent = args;
            StateHasChanged();
        };
    }

    public async void Select()
    {
        if (!Research.Active)
        {
            _engine.SetActiveResearch(Research);
            _engine.GetNextUpgrades();
            await OnClick.InvokeAsync(Research);
        }
    }
}
