@using System.Timers
@using Sentience.Models.Upgrades

@inject GameEngine _engine

@if (Upgrade != null)
{
    <tr class="@((Upgrade.Active) ? "upgrade-active" : "upgrade-inactive")">
        <td @onclick="Select" style="cursor: pointer;">@Upgrade.Name</td>
        <td>@Upgrade.GetModifierAmount(_engine) @Upgrade.Modifier.GetDisplayName()</td>
        <td>$@Upgrade.Expense</td>
    </tr>
}


@code {
    [Parameter] public Upgrade Upgrade { get; set; }

    UpgradeEventArgs upgradeEvent;

    protected override async Task OnInitializedAsync()
    {
        UpgradeUpdated += (o, args) =>
        {
            upgradeEvent = args;
            StateHasChanged();
        };
    }

    public void Select()
    {
        _engine.ToggleActiveUpgrade(Upgrade);
        _engine.SetExpenses();
        _engine.GetNextUpgrades();
    }
}